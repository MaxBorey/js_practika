//---------------------- –ó–∞–≤–¥–∞–Ω–Ω—è 1:--------------------------------------

// const planets = ["Earth", "Mars", "Venus"];

// for (let i = 0; i < planets.length; i += 1) {
//   console.log(planets[i]);
// }

// –§—É–Ω–∫—Ü—ñ—è calculateTotalPrice(order) –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä order - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª. –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ç–∞–∫, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ –º–∞—Å–∏–≤—É order.

// –û–≥–æ–ª–æ—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è calculateTotalPrice(order)
// –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó calculateTotalPrice([12, 85, 37, 4]) –ø–æ–≤–µ—Ä—Ç–∞—î 138
// –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó calculateTotalPrice([164, 48, 291]) –ø–æ–≤–µ—Ä—Ç–∞—î 503
// –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó calculateTotalPrice([412, 371, 94, 63, 176]) –ø–æ–≤–µ—Ä—Ç–∞—î 1116
// –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó calculateTotalPrice() –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –º–∞—Å–∏–≤–æ–º –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è



// function calculateTotalPrice(order) {
//     let totalPrice = 0;
//     for (let i = 0; i < order.length; i++) {
//     totalPrice += order[i];
//     }
//     return totalPrice
// }

// console.log(calculateTotalPrice([412, 371, 94, 63, 176]));

//---------------------- –ó–∞–≤–¥–∞–Ω–Ω—è 2:--------------------------------------

// –§—É–Ω–∫—Ü—ñ—è getEvenNumbers(start, end) –º–∞—î –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ start —Ç–∞ end, —è–∫—ñ —î —Ü—ñ–ª–∏–º–∏ —á–∏—Å–ª–∞–º–∏. –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ —É—Å—ñ—Ö –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª –≤—ñ–¥ start –¥–æ end. –Ø–∫—â–æ –∂–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ–º–∞—î, —Ç–æ –º–∞—Å–∏–≤ –º–∞—î –±—É—Ç–∏ –ø—É—Å—Ç–∏–º. –ü–∞—Ä–Ω–∏–º –≤–≤–∞–∂–∞—î—Ç—å—Å—è —á–∏—Å–ª–æ, —è–∫–µ –¥—ñ–ª–∏—Ç—å—Å—è –Ω–∞ 2 –±–µ–∑ –æ—Å—Ç–∞—á—ñ (10 % 2 === 0). –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª for.

// function getEvenNumbers(start, end) {
//     let array = [];
//     for (let i = start; i <= end; i++) {
//         if (i % 2 === 0) { array.push(i) } else {array}
//     }
//     return array;
// }

// console.log(getEvenNumbers(3, 11));

//---------------------- –ó–∞–≤–¥–∞–Ω–Ω—è 3:--------------------------------------


// –§—É–Ω–∫—Ü—ñ—è checkStorage(storage, item) –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:

// storage - –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤, —â–æ –æ–ø–∏—Å—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ —Å–∫–ª–∞–¥—ñ
// item - —Ä—è–¥–æ–∫ –∑ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä–∞, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏
// –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è–ª–∞, —á–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π —Ç–∞–∫–∏–π —Ç–æ–≤–∞—Ä –≤ –º–∞—Å–∏–≤—ñ storage —ñ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞:

// —Ä—è–¥–æ–∫ "<item> is available to order!", –¥–µ item - —Ü–µ –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä–∞, —è–∫—â–æ —Ç–æ–≤–∞—Ä –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ
// —Ä—è–¥–æ–∫ "Sorry! We are out of stock!", —è–∫—â–æ —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–º–∞—î –≤ –º–∞—Å–∏–≤—ñ
// –ó—Ä–æ–±–∏ —Ç–∞–∫, —â–æ–± –ø–æ—à—É–∫ –∑–∞ —ñ–º'—è–º —Ç–æ–≤–∞—Ä—É –±—É–≤ –Ω–µ–∑–∞–ª–µ–∂–Ω–∏–π –≤—ñ–¥ —Ä–µ–≥—ñ—Å—Ç—Ä—É, —Ç–æ–±—Ç–æ –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "plum" —ñ "pLuM" –º–∞—é—Ç—å –±—É—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ —É –º–∞—Å–∏–≤—ñ ["apple", "plum", "pear"].

// function checkStorage(storage, item) {
//     let lowerItem = item.toLowerCase();
//     let message = storage.includes(lowerItem) ? `${lowerItem} is available to order!` : "Sorry! We are out of stock!";
//     return message;
// }

// console.log(checkStorage(["apple", "plum", "pear"], "pLu"));

//---------------------- –ó–∞–≤–¥–∞–Ω–Ω—è 4:--------------------------------------



// –ü–µ—Ä–µ–¥ —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è–º —Ü—ñ—î—ó –∑–∞–¥–∞—á—ñ –≤–∞—Ä—Ç–æ –∑–∞–∑–Ω–∞—á–∏—Ç–∏, —â–æ —Ç–∞–∫–µ —Å–ø—ñ–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏. –°–ø—ñ–ª—å–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∞—Å–∏–≤—ñ–≤ –Ω–∞–∑–∏–≤–∞—é—Ç—å —Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ —É –≤—Å—ñ—Ö –º–∞—Å–∏–≤–∞—Ö.

// –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —É –¥–≤–æ—Ö –º–∞—Å–∏–≤–∞—Ö [1, 3, 5] —ñ [0, 8, 5, 3] —Å–ø—ñ–ª—å–Ω–∏–º–∏ –±—É–¥—É—Ç—å —á–∏—Å–ª–∞ 3 —ñ 5, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ –≤ –æ–±–æ—Ö –≤—Ö—ñ–¥–Ω–∏—Ö –º–∞—Å–∏–≤–∞—Ö. –ê —á–∏—Å–ª–∞ 0, 1 —ñ 8 –ø—Ä–∏—Å—É—Ç–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ –æ–¥–Ω–æ–º—É –∑ –º–∞—Å–∏–≤—ñ–≤.

// –§—É–Ω–∫—Ü—ñ—è getCommonElements(array1, array2), –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –º–∞—Å–∏–≤–∏ (array1 —Ç–∞ array2) –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –≤ —è–∫–æ—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.

// –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó:

// –°—Ç–≤–æ—Ä–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É.
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü–∏–∫–ª for –¥–ª—è —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —É array1.
// –£ —Ç—ñ–ª—ñ —Ü–∏–∫–ª—É –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç —ñ—Å–Ω—É—î —É array2 –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É includes.
// –Ø–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î, —Ç–æ –¥–æ–¥–∞–π –µ–ª–µ–º–µ–Ω—Ç –¥–æ –Ω–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É.
// –ü–æ–≤–µ—Ä–Ω–∏ –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π –º–∞—Å–∏–≤ —Å–ø—ñ–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —è–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó.
// function getCommonElements(array1, array2) {
//     let array3 = [];
//     for (let i = 0; i < array1.length; i++) {
//         let elem = array1[i];
//         if (array2.includes(elem)) {
//             array3.push(elem);
//         }
//            continue
//     }
//      return array3;
// }
// console.log(getCommonElements([1, 2, 3], [2, 1, 17, 19]));

//---------------------- –ó–∞–≤–¥–∞–Ω–Ω—è 5:--------------------------------------


// –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó calculateTotalPrice(order) —Ç–∞–∫, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É —á–∏—Å–µ–ª –≤ –º–∞—Å–∏–≤—ñ order. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü–∏–∫–ª for...of –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É.

// function calculateTotalPrice(order) {
//     let totalPrice = 0;
//     for (const price of order) {
//     totalPrice += price;
//     }
//     return totalPrice;
// }

// console.log(calculateTotalPrice([12, 85, 37, 4]));


//---------------------- –ó–∞–≤–¥–∞–Ω–Ω—è 6:--------------------------------------

// –§—É–Ω–∫—Ü—ñ—è createReversedArray() –º–æ–∂–µ –ø—Ä–∏–π–º–∞—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤. –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ —É—Å—ñ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, –∞–ª–µ –≤ –º–∞—Å–∏–≤—ñ –≤–æ–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –π—Ç–∏ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É. –¢–æ–±—Ç–æ, –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É createReversedArray(1, 2, 3), —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞—Å–∏–≤ [3, 2, 1]. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –∞–±–æ –º–µ—Ç–æ–¥ –º–∞—Å–∏–≤—É toReversed(), —è–∫–∏–π –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –º–∞—Å–∏–≤—É —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–æ–±–æ—Ç–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –ø–æ—Ä—è–¥–∫—É.

// function createReversedArray() {
//   // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç arguments —É –∑–≤–∏—á–∞–π–Ω–∏–π –º–∞—Å–∏–≤
//   const arr = Array.from(arguments);
//   // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏–π –º–∞—Å–∏–≤
//   return arr.reverse();
// }

// function createReversedArray() {
//     const array = Array.from(arguments);
//     if (arguments.length !== 0) {
//         for (const arg of arguments) {
//             return array.toReversed();
//         }
//     } else {
//         return array;
//     }
// }

// console.log(createReversedArray(1, 2));

//---------------------- –ó–∞–≤–¥–∞–Ω–Ω—è 7:--------------------------------------

// –§—É–Ω–∫—Ü—ñ—è calculateTax(amount, taxRate) –æ–≥–æ–ª–æ—à—É—î –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:

// amount - —á–∏—Å–ª–æ, —Å—É–º–∞ –≤—ñ–¥ —è–∫–æ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—á–∏—Å–ª–∏—Ç–∏ –ø–æ–¥–∞—Ç–æ–∫. –û–±–æ–≤'—è–∑–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä.
// taxRate - —á–∏—Å–ª–æ, –ø–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞–≤–∫–∞. –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ 0.2.
// –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ —Å—É–º—É –ø–æ–¥–∞—Ç–∫—É - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–Ω–æ–∂–µ–Ω–Ω—è —Å—É–º–∏ –Ω–∞ –ø–æ–¥–∞—Ç–∫–æ–≤—É —Å—Ç–∞–≤–∫—É.

// function calculateTax(amount, taxRate = 0.2) {
//     let totalTax;
//     totalTax = `${amount}` * `${taxRate}`;
//     return totalTax;
// }
// console.log(calculateTax(100));


// –û—Å—å —Ü—ñ–∫–∞–≤–∞ –∑–∞–¥–∞—á–∫–∞ –ø–æ —Ü–∏–∫–ª–∞—Ö:

// –ó–∞–¥–∞—á–∞: –ß–∏—Å–ª–∞ –§—ñ–±–æ–Ω–∞—á—á—ñ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é fibonacci(n), —è–∫–∞ –ø—Ä–∏–π–º–∞—î —á–∏—Å–ª–æ n —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —ñ–∑ –ø–µ—Ä—à–∏—Ö n —á–∏—Å–µ–ª –§—ñ–±–æ–Ω–∞—á—á—ñ.

// üìå –ß–∏—Å–ª–∞ –§—ñ–±–æ–Ω–∞—á—á—ñ ‚Äî —Ü–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å, —É —è–∫—ñ–π:

// –ü–µ—Ä—à—ñ –¥–≤–∞ —á–∏—Å–ª–∞ ‚Äî 0 —ñ 1.
// –ö–æ–∂–Ω–µ –Ω–∞—Å—Ç—É–ø–Ω–µ —á–∏—Å–ª–æ –¥–æ—Ä—ñ–≤–Ω—é—î —Å—É–º—ñ –¥–≤–æ—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö.

// üéØ –í–∏–º–æ–≥–∏:

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª (for –∞–±–æ while).
// –§—É–Ω–∫—Ü—ñ—è –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –º–∞—Å–∏–≤.

// function fibonacci(n) {
//     if (n === 1) return [0];

//     let arrayFibonacci = [0, 1];
//     for (let i = 2; i < n; i++) {
//         let element = (arrayFibonacci[i-2]) + (arrayFibonacci[i - 1]);
//         arrayFibonacci.push(element);
//     }
    
//     return arrayFibonacci;
// }

// function fibonacci(n) {
//   let arr = [];
//   for (let i = 0; i < n; i++) {
//     arr.push(i < 2 ? i : arr.at(-1) + arr.at(-2));
//   }
//   return arr;
// }

// console.log(fibonacci(8)); // [0, 1, 1, 2, 3, 5, 8, 13]

// function fibonacci(n) {
// if (n === 1) return [0];
// const arr = [0, 1];
// let i = 1;
//   while (arr.length < n) {
//     arr.push(arr[i - 1] + arr[i++]);
//   }
//   return arr;
// }

// const fibonacci = n => [...Array(n)].map((_, i, arr) => arr[i] = i && arr[i-1] + arr[i-2] || i);

// console.log(fibonacci(5)); // [0, 1, 1, 2, 3]
// console.log(fibonacci(8)); // [0, 1, 1, 2, 3, 5, 8, 13]

// let Fibonacci=[1,2,3,4];
// console.log(Fibonacci[1]);


// function fillArray(min, max) {
//     let arr = [];
//     for (let i = min; i <= max; i += 2) {
//       return arr.push(i)
//     }
// }

// console.log(fillArray(2, 10));

 
// –ó–∞–¥–∞—á–∞: –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ—ó —Ü–∏—Ñ—Ä–∏ –≤ —á–∏—Å–ª—ñ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é maxDigit(n), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–¥–∞—Ç–Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ n —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ –Ω–∞–π–±—ñ–ª—å—à—É —Ü–∏—Ñ—Ä—É.

// üìå –ù–∞–ø—Ä–∏–∫–ª–∞–¥:

// javascript
// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
// console.log(maxDigit(829)); // 9
// console.log(maxDigit(4825)); // 8
// console.log(maxDigit(123456789)); // 9
// console.log(maxDigit(305)); // 5
// üéØ –í–∏–º–æ–≥–∏:

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª (while –∞–±–æ for).
// –ù–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–π —á–∏—Å–ª–æ –≤ —Ä—è–¥–æ–∫ (–±–µ–∑ .toString() –∞–±–æ .split()).


// function maxDigit(n) {
//     let strN = n.toString();
//     let maxNum = 0;

//     for (let i = 0; i < strN.length; i++) {
//         let currentDigit = parseInt(strN[i]);
//         if (currentDigit > maxNum) {
//             maxNum = currentDigit;
//         }
//     }
    
//     return maxNum;
// }


// console.log(maxDigit(829)); // 9
// console.log(maxDigit(4825)); // 8
// console.log(maxDigit(123456789)); // 9
// console.log(maxDigit(305)); // 5


// –ó–∞–¥–∞—á–∞: –°—É–º–∞ –≤—Å—ñ—Ö —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ N
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é sumNumbers(n), —è–∫–∞ –ø—Ä–∏–π–º–∞—î —á–∏—Å–ª–æ n —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ n.

// üîπ –ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–±–æ—Ç–∏:

// javascript
// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
// console.log(sumNumbers(5)); // 15 (1 + 2 + 3 + 4 + 5)
// console.log(sumNumbers(10)); // 55 (1 + 2 + ... + 10)
// console.log(sumNumbers(3)); // 6 (1 + 2 + 3)
// üéØ –©–æ —Ç—Ä–µ–±–∞ –∑—Ä–æ–±–∏—Ç–∏?

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª (for –∞–±–æ while).
// –î–æ–¥–∞–π —É—Å—ñ —á–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ n —ñ –ø–æ–≤–µ—Ä–Ω–∏ —Å—É–º—É.

// function sumNumbers(n) {
//     let numbers = 0;
//     for (let i = 0; i <= n; i++) {
//         numbers += i;
//     }
//     return numbers;
// }

// console.log(sumNumbers(5)); // 15 (1 + 2 + 3 + 4 + 5)
// console.log(sumNumbers(10)); // 55 (1 + 2 + ... + 10)
// console.log(sumNumbers(3)); // 6 (1 + 2 + 3)


// –ó–∞–¥–∞—á–∞: –í–∏–≤–µ—Å—Ç–∏ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é evenNumbers(n), —è–∫–∞ –ø—Ä–∏–π–º–∞—î —á–∏—Å–ª–æ n —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —É—Å—ñ—Ö –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ n.

// üîπ –ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–±–æ—Ç–∏:

// javascript
// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
// console.log(evenNumbers(10)); // [2, 4, 6, 8, 10]
// console.log(evenNumbers(7));  // [2, 4, 6]
// console.log(evenNumbers(1));  // []
// üéØ –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏?

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª (for).
// –î–æ–¥–∞–π —É—Å—ñ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞ –≤ –º–∞—Å–∏–≤.
// –ü–æ–≤–µ—Ä–Ω–∏ —Ü–µ–π –º–∞—Å–∏–≤.

// function evenNumbers(n) {
//     let arrayEvenNumbers = [];
//     for (let i = 0; i <= n; i++) {
//         if (i !==0 && i % 2 === 0) {
//             arrayEvenNumbers.push(i);
//         }
//     }
//     return arrayEvenNumbers;
// }



// console.log(evenNumbers(10)); // [2, 4, 6, 8, 10]
// console.log(evenNumbers(7));  // [2, 4, 6]
// console.log(evenNumbers(1));  // []



// –ó–∞–¥–∞—á–∞: –ß–∏—Å–ª–æ ‚Äî –ø–∞–ª—ñ–Ω–¥—Ä–æ–º
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é isPalindrome(n), —è–∫–∞ –ø—Ä–∏–π–º–∞—î —á–∏—Å–ª–æ n —ñ –ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ —á–∏—Å–ª–æ —î –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º, —ñ false ‚Äî —è–∫—â–æ –Ω—ñ.

// üìå –ü–∞–ª—ñ–Ω–¥—Ä–æ–º ‚Äî —Ü–µ —á–∏—Å–ª–æ, —è–∫–µ —á–∏—Ç–∞—î—Ç—å—Å—è –æ–¥–Ω–∞–∫–æ–≤–æ –∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ —ñ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª—ñ–≤–æ.

// üîπ –ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–±–æ—Ç–∏:

// javascript
// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
// console.log(isPalindrome(121));   // true
// console.log(isPalindrome(123));   // false
// console.log(isPalindrome(1221));  // true
// console.log(isPalindrome(10));    // false
// console.log(isPalindrome(7));     // true (–æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ –∑–∞–≤–∂–¥–∏ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º)
// üéØ –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏?

// –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —á–∏—Å–ª–æ –≤ —Ä—è–¥–æ–∫ (toString()).
// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ä—ñ–≤–Ω–∏–π —Ü–µ–π —Ä—è–¥–æ–∫ —Å–≤–æ—î–º—É –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–º—É –≤–∞—Ä—ñ–∞–Ω—Ç—É.
// –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ true –∞–±–æ false.

// function isPalindrome(n) {
//     let number = n.toString(); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —á–∏—Å–ª–æ –≤ —Ä—è–¥–æ–∫
//     let reversed = number.split("").reverse().join(""); // –ü–µ—Ä–µ–≤–µ—Ä—Ç–∞—î–º–æ —Ä—è–¥–æ–∫
    
//     return number === reversed; // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º —Ä—è–¥–∫–æ–º
// }

// console.log(isPalindrome(121));   // true
// console.log(isPalindrome(123));   // false
// console.log(isPalindrome(1221));  // true
// console.log(isPalindrome(10));    // false
// console.log(isPalindrome(7));     // true (–æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞ –∑–∞–≤–∂–¥–∏ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º)